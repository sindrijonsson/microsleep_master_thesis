# save.str <- sprintf("residual_analysis_%s",INDUSTRY_DICT[i])
# super.save(save.str)
print(ks.test(m$residuals[i,]/sd(m$residuals[i,],na.rm=T), "pnorm"))
}
strip.all <- df[,-c(1,10)]
start.idx <- nrow(train.df)
n.ahead <- nrow(test.df)
pred <- arma.forecast(strip.all, nstart = start.idx, nstep = n.ahead, marima=m)
# Large table
all.df <- melt(df[,c("date",names(INDUSTRY_DICT))], id.vars="date",
variable.name = "industry",
value.name = "observations")
all.df$predictions <- rep(NA,nrow(all.df))
all.df$lwr95 <- rep(NA,nrow(all.df))
all.df$upr95 <- rep(NA,nrow(all.df))
# Create predictions table
pred.df <- data.frame("date" = test.df$date)
gen.colname <- function(ind, postfix) {return (sprintf("%s_%s",ind,postfix))}
for (i in 1:5){
ind <- names(INDUSTRY_DICT)[i]
nice.name <- INDUSTRY_DICT[ind]
# Log observations
pred.df[,gen.colname(nice.name,"observations")] <- test.df[,ind]
# Log predictions
pred.df[,gen.colname(nice.name,"predictions")] <- pred$forecasts[i,((start.idx+1):ncol(pred$forecasts))]
# Log confidence interval
tmp.ci <- 1.96 * sqrt(pred$pred.var[i,i,])
pred.df[,gen.colname(nice.name,"lwr95")] <- pred$forecasts[i,((start.idx+1):ncol(pred$forecasts))]-tmp.ci
pred.df[,gen.colname(nice.name,"upr95")] <- pred$forecasts[i,((start.idx+1):ncol(pred$forecasts))]+tmp.ci
# Print latest table
tmp <- pred.df[,c(1,((ncol(pred.df)-3):ncol(pred.df)))]
# print(tmp)
# Log to big table
crit <- (all.df$industry == ind)
crit.test <- crit & (all.df$date %in% test.df$date)
all.df$predictions[crit] <- pred$forecasts[i,]
all.df$lwr95[crit.test] <- pred$forecasts[i,((start.idx+1):ncol(pred$forecasts))]-tmp.ci
all.df$upr95[crit.test] <- pred$forecasts[i,((start.idx+1):ncol(pred$forecasts))]+tmp.ci
}
# Subset from this date to end
demo.start.date <- which(df$date == as.Date("2016-01-01"))
demo.dates <- df$date[demo.start.date:nrow(df)]
plot.df <- all.df[all.df$date %in% demo.dates,]
ggplot(plot.df, aes(x = date)) +
geom_ribbon(aes(ymin = lwr95, ymax = upr95), alpha=0.2) +
# geom_line(aes(y = observations, col = industry), size=0.5) +
geom_point(aes(y = observations, col = industry)) +
geom_path(aes(y = predictions), size=0.5) + geom_point(aes(y=predictions), size=1)+
geom_vline(xintercept = test.df$date[1], linetype="dashed") +
scale_color_manual(values = INDUSTRY_COLORS) +
scale_fill_manual(values = INDUSTRY_COLORS) +
facet_wrap(.~industry, ncol=3,
labeller = as_labeller(INDUSTRY_DICT)) +
labs(x = "Date", y = "Return") +
theme(legend.position = "none")
super.save("predictions_test")
# Create pretty table to put into report
report.table <- all.df[all.df$date %in% test.df$date,]
report.table$date <- as.character(report.table$date)
report.table$industry <- mapvalues(report.table$industry,
from=names(INDUSTRY_DICT),
to=unname(INDUSTRY_DICT))
print(xtable(report.table, digits=3), include.rownames = F)
FIG.SAVE.ON <- T
strip.all <- df[,-c(1,10)]
start.idx <- nrow(train.df)
n.ahead <- nrow(test.df)
pred <- arma.forecast(strip.all, nstart = start.idx, nstep = n.ahead, marima=m)
# Large table
all.df <- melt(df[,c("date",names(INDUSTRY_DICT))], id.vars="date",
variable.name = "industry",
value.name = "observations")
all.df$predictions <- rep(NA,nrow(all.df))
all.df$lwr95 <- rep(NA,nrow(all.df))
all.df$upr95 <- rep(NA,nrow(all.df))
# Create predictions table
pred.df <- data.frame("date" = test.df$date)
gen.colname <- function(ind, postfix) {return (sprintf("%s_%s",ind,postfix))}
for (i in 1:5){
ind <- names(INDUSTRY_DICT)[i]
nice.name <- INDUSTRY_DICT[ind]
# Log observations
pred.df[,gen.colname(nice.name,"observations")] <- test.df[,ind]
# Log predictions
pred.df[,gen.colname(nice.name,"predictions")] <- pred$forecasts[i,((start.idx+1):ncol(pred$forecasts))]
# Log confidence interval
tmp.ci <- 1.96 * sqrt(pred$pred.var[i,i,])
pred.df[,gen.colname(nice.name,"lwr95")] <- pred$forecasts[i,((start.idx+1):ncol(pred$forecasts))]-tmp.ci
pred.df[,gen.colname(nice.name,"upr95")] <- pred$forecasts[i,((start.idx+1):ncol(pred$forecasts))]+tmp.ci
# Print latest table
tmp <- pred.df[,c(1,((ncol(pred.df)-3):ncol(pred.df)))]
# print(tmp)
# Log to big table
crit <- (all.df$industry == ind)
crit.test <- crit & (all.df$date %in% test.df$date)
all.df$predictions[crit] <- pred$forecasts[i,]
all.df$lwr95[crit.test] <- pred$forecasts[i,((start.idx+1):ncol(pred$forecasts))]-tmp.ci
all.df$upr95[crit.test] <- pred$forecasts[i,((start.idx+1):ncol(pred$forecasts))]+tmp.ci
}
# Subset from this date to end
demo.start.date <- which(df$date == as.Date("2016-01-01"))
demo.dates <- df$date[demo.start.date:nrow(df)]
plot.df <- all.df[all.df$date %in% demo.dates,]
ggplot(plot.df, aes(x = date)) +
geom_ribbon(aes(ymin = lwr95, ymax = upr95), alpha=0.2) +
# geom_line(aes(y = observations, col = industry), size=0.5) +
geom_point(aes(y = observations, col = industry)) +
geom_path(aes(y = predictions), size=0.5) + geom_point(aes(y=predictions), size=1)+
geom_vline(xintercept = test.df$date[1], linetype="dashed") +
scale_color_manual(values = INDUSTRY_COLORS) +
scale_fill_manual(values = INDUSTRY_COLORS) +
facet_wrap(.~industry, ncol=3,
labeller = as_labeller(INDUSTRY_DICT)) +
labs(x = "Date", y = "Return") +
theme(legend.position = "none")
super.save("predictions_test")
# Create pretty table to put into report
report.table <- all.df[all.df$date %in% test.df$date,]
report.table$date <- as.character(report.table$date)
report.table$industry <- mapvalues(report.table$industry,
from=names(INDUSTRY_DICT),
to=unname(INDUSTRY_DICT))
print(xtable(report.table, digits=3), include.rownames = F)
# Subset from this date to end
demo.start.date <- which(df$date == as.Date("1946-01-01"))
demo.dates <- df$date[demo.start.date:nrow(df)]
plot.df <- all.df[all.df$date %in% demo.dates,]
ggplot(plot.df, aes(x = date)) +
geom_ribbon(aes(ymin = lwr95, ymax = upr95), alpha=0.2) +
geom_line(aes(y = observations, col = industry), size=0.5) +
geom_path(aes(y = predictions), size=0.5) + # geom_point(aes(y=predictions), size=1)+
# geom_vline(xintercept = test.df$date[1], linetype="dashed") +
scale_color_manual(values = INDUSTRY_COLORS) +
scale_fill_manual(values = INDUSTRY_COLORS) +
facet_wrap(.~industry, ncol=3,
labeller = as_labeller(INDUSTRY_DICT)) +
labs(x = "Date", y = "Return") +
theme(legend.position = "none")
super.save("predictions_long")
print(xtable(report.table, digits=3), include.rownames = F)
m.preds <- report.table
xreg <- as.matrix(cbind(train.df[,7:9]))
for (ind in names(INDUSTRY_DICT)) {
print(INDUSTRY_DICT[ind])
m.reg <- auto.arima(train.df[,ind], xreg = xreg)
print(m)
p <- org_residualAnalysis(m.reg,INDUSTRY_DICT[ind])
print(p)
}
m.reg
strip.df <- train.df[,-c(1,10)]
# Define model
Model.reg.3.3 <- define.model(kvar = ncol(strip.df), ar=c(1,2,3), ma=c(1),
reg.var = c(6,7,8),
indep = NULL)
Marima.reg.3.3 <- marima(strip.df, means=1,
ar.pattern = Model.reg.3.3$ar.pattern,
ma.pattern = Model.reg.3.3$ma.pattern,
penalty=0, Check=T, Plot="log.det")
m.reg <- step.slow(Marima.reg.3.3, strip.df, penalty=2)
short.form(m.reg$ar.fvalues, leading = F)
short.form(m.reg$ma.fvalues, leading = F)
source("myResidualAnalysis.R")
for (i in 1:5){
p<-my_residualAnalysis(m.reg$residuals[i,], INDUSTRY_DICT[i])
print(p)
save.str <- sprintf("reg_residual_analysis_%s",INDUSTRY_DICT[i])
super.save(save.str)
print(ks.test(m.reg$residuals[i,]/sd(m.reg$residuals[i,],na.rm=T), "pnorm"))
}
FIG.SAVE.ON
strip.all <- df[,-c(1,10)]
start.idx <- nrow(train.df)
n.ahead <- nrow(test.df)
pred.reg <- arma.forecast(strip.all, nstart = start.idx, nstep = n.ahead, marima=m.reg)
# Large table
all.df.reg <- melt(df[,c("date",names(INDUSTRY_DICT))], id.vars="date",
variable.name = "industry",
value.name = "observations")
all.df.reg$predictions <- rep(NA,nrow(all.df.reg))
all.df.reg$lwr95 <- rep(NA,nrow(all.df.reg))
all.df.reg$upr95 <- rep(NA,nrow(all.df.reg))
# Create predictions table
pred.df <- data.frame("date" = test.df$date)
gen.colname <- function(ind, postfix) {return (sprintf("%s_%s",ind,postfix))}
for (i in 1:5){
ind <- names(INDUSTRY_DICT)[i]
nice.name <- INDUSTRY_DICT[ind]
# Log observations
pred.df[,gen.colname(nice.name,"observations")] <- test.df[,ind]
# Log predictions
pred.df[,gen.colname(nice.name,"predictions")] <- pred.reg$forecasts[i,((start.idx+1):ncol(pred.reg$forecasts))]
# Log confidence interval
tmp.ci <- 1.96 * sqrt(pred.reg$pred.var[i,i,])
pred.df[,gen.colname(nice.name,"lwr95")] <- pred.reg$forecasts[i,((start.idx+1):ncol(pred.reg$forecasts))]-tmp.ci
pred.df[,gen.colname(nice.name,"upr95")] <- pred.reg$forecasts[i,((start.idx+1):ncol(pred.reg$forecasts))]+tmp.ci
# Print latest table
tmp <- pred.df[,c(1,((ncol(pred.df)-3):ncol(pred.df)))]
print(tmp)
# Log to big table
crit <- (all.df.reg$industry == ind)
crit.test <- crit & (all.df.reg$date %in% test.df$date)
all.df.reg$predictions[crit] <- pred.reg$forecasts[i,]
all.df.reg$lwr95[crit.test] <- pred.reg$forecasts[i,((start.idx+1):ncol(pred.reg$forecasts))]-tmp.ci
all.df.reg$upr95[crit.test] <- pred.reg$forecasts[i,((start.idx+1):ncol(pred.reg$forecasts))]+tmp.ci
}
# Subset from this date to end
demo.start.date <- which(df$date == as.Date("2016-01-01"))
demo.dates <- df$date[demo.start.date:nrow(df)]
plot.df <- all.df.reg[all.df.reg$date %in% demo.dates,]
ggplot(plot.df, aes(x = date)) +
geom_ribbon(aes(ymin = lwr95, ymax = upr95), alpha=0.2) +
geom_point(aes(y = observations, col = industry)) +
geom_path(aes(y = predictions), size=0.5) + geom_point(aes(y=predictions), size=1)+
geom_vline(xintercept = test.df$date[1], linetype="dashed") +
scale_color_manual(values = INDUSTRY_COLORS) +
scale_fill_manual(values = INDUSTRY_COLORS) +
facet_wrap(.~industry, ncol=3,
labeller = as_labeller(INDUSTRY_DICT)) +
labs(x = "Date", y = "Return") +
theme(legend.position = "none")
super.save("reg_predictions_test")
# Create pretty table to put into report
report.table.reg <- all.df.reg[all.df.reg$date %in% test.df$date,]
# Calculate mse
report.table.reg$date <- as.character(report.table.reg$date)
report.table.reg$industry <- mapvalues(report.table.reg$industry,
from=names(INDUSTRY_DICT),
to=unname(INDUSTRY_DICT))
print(xtable(report.table.reg, digits=3), include.rownames = F)
# Subset from this date to end
demo.start.date <- which(df$date == as.Date("1946-01-01"))
demo.dates <- df$date[demo.start.date:nrow(df)]
plot.df <- all.df[all.df$date %in% demo.dates,]
ggplot(plot.df, aes(x = date)) +
geom_ribbon(aes(ymin = lwr95, ymax = upr95), alpha=0.2) +
geom_line(aes(y = observations, col = industry), size=0.5) +
geom_path(aes(y = predictions), size=0.5) + # geom_point(aes(y=predictions), size=1)+
# geom_vline(xintercept = test.df$date[1], linetype="dashed") +
scale_color_manual(values = INDUSTRY_COLORS) +
scale_fill_manual(values = INDUSTRY_COLORS) +
facet_wrap(.~industry, ncol=3,
labeller = as_labeller(INDUSTRY_DICT)) +
labs(x = "Date", y = "Return") +
theme(legend.position = "none")
super.save("reg_predictions_long")
print(xtable(report.table.reg, digits=3), include.rownames = F)
nr <- report.table
wr <- report.table.reg
nr$predictions
print(cbind(nr$predictions, wr$predictions))
nr %>% group_by(industry) %>%
summarize(e = sum((observations - predictions).^2))
nr %>% group_by(industry) %>%
summarize(e = sum((observations - predictions)^2))
summarize(e = mean((observations))
summarize(e = mean((observations))
nr %>% group_by(industry) %>%
summarize(e = mean(observations))
nr$industry
class(nr)
aggregate(nr, by=list("industry"), mean(observations))
aggregate(nr, by=list("industry"), mean(x[1,]))
aggregate(nr, by=list("industry"), function(x){mean(x[1,])})
aggregate(nr$oberservations, by=list("industry"), mean)
aggregate(nr$observations, by=list("industry"), mean)
aggregate(nr$observations, by=industry, mean)
nr
nr$se <- (nr$predictions - nr$observations)^2
nr$se
nr <- report.table
wr <- report.table.reg
nr$se <- (nr$predictions - nr$observations)^2
wr$se <- (wr$predictions - wr$observations)^2
nr %>% group_by(industry) %>%
summarize(e = mean(se))
colnames(df)
colnames(nr)
summarize(e = n()
nr %>% group_by(industry) %>%
nr <- report.table
wr <- report.table.reg
nr$se <- (nr$predictions - nr$observations)^2
wr$se <- (wr$predictions - wr$observations)^2
nr %>% group_by(industry) %>%
summarize(e = n())
nr
nr %>% group_by(industry) %>%
summarize(e = 2/n())
summarize(e = 2/n
nr %>% group_by(industry) %>%
nr %>% group_by(industry) %>%
summarize(e = 2/n())
nr %>% group_by(industry) %>%
summarize(e = mean(observations))
nr %>% group_by(industry) %>%
summarize(e = mean(se))
nr %>% group_by(industry) %>%
summarise(e = mean(se))
groups(nr)
nr %>% dplyr::group_by(industry) %>%
summarise(e = mean(se))
nr %>% dplyr::group_by(industry) %>%
dplyr::summarise(e = mean(se))
wr %>% dplyr::group_by(industry) %>%
dplyr::summarise(e = mean(se))
nr <- report.table
wr <- report.table.reg
nr$se <- (nr$predictions - nr$observations)^2
wr$se <- (wr$predictions - wr$observations)^2
nr %>% dplyr::group_by(industry) %>%
dplyr::summarise(e = mean(se))
wr %>% dplyr::group_by(industry) %>%
dplyr::summarise(e = mean(se))
pred.errs <- merge.data.frame(nr.mse, wr.mse, by=industry)
nr <- report.table
wr <- report.table.reg
nr$se <- (nr$predictions - nr$observations)^2
wr$se <- (wr$predictions - wr$observations)^2
nr.mse <- data.frame ( nr %>% dplyr::group_by(industry) %>%
dplyr::summarise(msee = mean(se)) )
wr.mse <- data.frame ( wr %>% dplyr::group_by(industry) %>%
dplyr::summarise(mse = mean(se)) )
pred.errs <- merge.data.frame(nr.mse, wr.mse, by=industry)
pred.errs <- merge.data.frame(nr.mse, wr.mse, by=c("industry"))
pred.errs
colnames(pred.errs) <- c("Industry","without","with")
pred.errs
nr <- report.table
wr <- report.table.reg
nr$se <- (nr$predictions - nr$observations)^2
wr$se <- (wr$predictions - wr$observations)^2
nr.mse <- data.frame ( nr %>% dplyr::group_by(industry) %>%
dplyr::summarise(mse = mean(se)) )
wr.mse <- data.frame ( wr %>% dplyr::group_by(industry) %>%
dplyr::summarise(mse = mean(se)) )
pred.errs <- merge.data.frame(nr.mse, wr.mse, by=c("industry"))
colnames(pred.errs) <- c("Industry","without","with")
pred.errs <- rbind.data.frame(pred.errs,
data.frame("Industry"="mean",
"without" = mean(nr$se),
"with" = mean(wr$se)))
print(xtable(pred.errs, digits = 3), include.rownames = F)
pred.errs
pdf <- rbind.data.frame(nr, wr)
pdf$model <- rep(c("with xreg","without xreg"), each=5)
pdf
pdf$model <- rep(c("with xreg","without xreg"), each=1, 5)
pdf <- rbind.data.frame(nr, wr)
pdf$model <- rep(c("with xreg","without xreg"), each=1, 5)
pdf
pdf$model <- rep(c("with xreg","without xreg"), each=5)
pdf <- rbind.data.frame(nr, wr)
pdf$model <- rep(c("with xreg","without xreg"), each=5)
pdf
pdf <- rbind.data.frame(nr, wr)
pdf$model <- rep(c("with xreg","without xreg"), each=5*5)
pdf <- rbind.data.frame(nr, wr)
pdf$model <- rep(c("with xreg","without xreg"), each=25)
pdf <- rbind.data.frame(nr, wr)
pdf$model <- rep(c("with xreg","without xreg"), each=20)
pdf$model
pdf
ggplot(pdf, aes(x = date, y = observations)) +
geom_point()
ggplot(pdf, aes(x = date, y = observations)) +
geom_point() +
facet_wrap(.~industry, ncol=3)
pdf <- rbind.data.frame(nr, wr)
pdf$model <- rep(c("with xreg","without xreg"), each=20)
ggplot(pdf, aes(x = date)) +
geom_point(aes(y=observations)) + geom_line(aes(y=observations)) +
geom_point(aes(y = predictions, col = model)) + geom_line(aes(y=predictions, col = model, group=model))+
facet_wrap(.~industry, ncol=3)
pdf
pdf <- rbind.data.frame(nr, wr)
pdf$model <- rep(c("with xreg","without xreg"), each=20)
pdf$date <- as.Date(pdf$date)
ggplot(pdf, aes(x = date)) +
geom_point(aes(y=observations)) + geom_line(aes(y=observations)) +
geom_point(aes(y = predictions, col = model)) + geom_line(aes(y=predictions, col = model, group=model))+
facet_wrap(.~industry, ncol=3)
pdf <- rbind.data.frame(nr, wr)
pdf$model <- rep(c("with xreg","without xreg"), each=20)
pdf$date <- as.Date(pdf$date)
ggplot(pdf, aes(x = date)) +
geom_point(aes(y=observations)) + geom_line(aes(y=observations)) +
geom_point(aes(y = predictions, col = model)) + geom_line(aes(y=predictions, col = model, group=model))+
facet_wrap(.~industry, ncol=3) +
theme(legend.position = "top")
nr <- report.table
wr <- report.table.reg
nr$se <- (nr$predictions - nr$observations)^2
wr$se <- (wr$predictions - wr$observations)^2
nr.mse <- data.frame ( nr %>% dplyr::group_by(industry) %>%
dplyr::summarise(mse = mean(se)) )
wr.mse <- data.frame ( wr %>% dplyr::group_by(industry) %>%
dplyr::summarise(mse = mean(se)) )
pred.errs <- merge.data.frame(nr.mse, wr.mse, by=c("industry"))
colnames(pred.errs) <- c("Industry","without","with")
pred.errs <- rbind.data.frame(pred.errs,
data.frame("Industry"="mean",
"without" = mean(nr$se),
"with" = mean(wr$se)),
data.frame("Industry" = "s.e.",
"without" = sd(nr$se) / sqrt(nrow(nr)),
"with" = sd(wr$se) / sqrt(nrow(wr))) )
print(xtable(pred.errs, digits = 3), include.rownames = F)
ggplot(pdf, aes(x = date)) +
geom_point(aes(y=observations)) + geom_line(aes(y=observations)) +
geom_point(aes(y = predictions, col = model)) + geom_line(aes(y=predictions, col = model, group=model))+
facet_wrap(.~industry, ncol=3) +
theme(legend.position = "top",
legend.title = element_text("Marima model: "))
pdf <- rbind.data.frame(nr, wr)
pdf$model <- rep(c("with xreg","without xreg"), each=20)
pdf$date <- as.Date(pdf$date)
ggplot(pdf, aes(x = date)) +
geom_point(aes(y=observations)) + geom_line(aes(y=observations)) +
geom_point(aes(y = predictions, col = model)) + geom_line(aes(y=predictions, col = model, group=model))+
facet_wrap(.~industry, ncol=3) +
guides(fill=guide_legend(title="Marima model")) +
theme(legend.position = "top")
pdf <- rbind.data.frame(nr, wr)
pdf$model <- rep(c("with xreg","without xreg"), each=20)
pdf$date <- as.Date(pdf$date)
ggplot(pdf, aes(x = date)) +
geom_point(aes(y=observations)) + geom_line(aes(y=observations)) +
geom_point(aes(y = predictions, col = model)) + geom_line(aes(y=predictions, col = model, group=model))+
facet_wrap(.~industry, ncol=3) +
scale_fill_discrete(name=guide_legend(title="Marima model")) +
theme(legend.position = "top")
pdf <- rbind.data.frame(nr, wr)
pdf$model <- rep(c("with xreg","without xreg"), each=20)
pdf$date <- as.Date(pdf$date)
ggplot(pdf, aes(x = date)) +
geom_point(aes(y=observations)) + geom_line(aes(y=observations)) +
geom_point(aes(y = predictions, col = model)) + geom_line(aes(y=predictions, col = model, group=model))+
facet_wrap(.~industry, ncol=3) +
scale_fill_discrete(name="Marima model") +
theme(legend.position = "top")
ggplot(pdf, aes(x = date)) +
geom_point(aes(y=observations)) + geom_line(aes(y=observations)) +
geom_point(aes(y = predictions, col = model)) + geom_line(aes(y=predictions, col = model, group=model))+
scale_fill_discrete(name="Marima model") +
facet_wrap(.~industry, ncol=3) +
theme(legend.position = "top")
ggplot(pdf, aes(x = date)) +
geom_point(aes(y=observations)) + geom_line(aes(y=observations)) +
geom_point(aes(y = predictions, col = model)) + geom_line(aes(y=predictions, col = model, group=model))+
facet_wrap(.~industry, ncol=3) +
theme(legend.position = "top")
super.save("pred_comparison")
library(ggplot2)
library(dplyr)
library(ggpubr)
setwd("C:/code/mU-Sleep/R")
data <- read.csv("data.csv",stringsAsFactors = TRUE)
head(data)
str(data)
x.var <- colnames(data)[grepl("x_",colnames(data))]
y.var <- "y"
for (x in x.var) {
gs <- ggscatter(data, x = x, y = y.var,
add = "reg.line",  # Add regressin line
add.params = list(color = "blue", fill = "lightgray"), # Customize reg. line
conf.int = TRUE # Add confidence interval
) + facet_wrap(.~model)
print(gp)
}
ggpubr::ggscatter
ggpubr::ggscatter()
install.packages("ggpubr")
install.packages("ggpubr")
install.packages("ggpubr")
library(ggpubr)
library(ggcorrplot)
install.packages("ggcorrplot")
install.packages("ggcorrplot")
library(ggcorrplot)
library(ggplot2)
ggplot()
library(ggplot2)
library(ggplot2)
library(ggplot2)
library(ggplot2)
library(ggplot2)
library(ggplot2)
.libPaths()
all.data <- read.csv("all_data.csv",stringsAsFactors = TRUE)
all.data$y[all.data$model=="Human"]
all.data[all.data$model=="Human", c("id","y")]
aasm.sl <- all.data[all.data$model=="Human", c("id","y")]
sort(aasm.sl$id)
order(aasm.sl$id)
aasm.sl<-aasm.sl[order(aasm.sl$id),]
aasm.sl
getwd()
setwd("C:\\code/mU-Sleep/R/")
library(readxl)
ref <- read_xlsx("../Matlab/Skorucak2020/2023_data_raw_AASM.xlsx")
ref
str(aasm.sl)
ref
ref <- data.frame(ref, stringsAsFactors = TRUE)
ref
str(ref)
str(aasm.sl)
merge.data.frame(aasm.sl, ref, by = "id",suffixes = c("mine","ref"))
m<-merge.data.frame(aasm.sl, ref, by = "id",suffixes = c("mine","ref"))
m$y - m$aasm_sl_sec
round(m$y - m$aasm_sl_sec)
